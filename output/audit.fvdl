<?xml version='1.0' encoding='UTF-8'?>
<FVDL>
  <Vulnerabilities>
    <Vulnerability>
      <ClassID>fc6a4a09-a999-4972-84ab-5d62818a8636</ClassID>
      <AnalyzerName>Burp Suite</AnalyzerName>
      <Kingdom>Input Validation</Kingdom>
      <Type>Frameable response (potential Clickjacking)</Type>
      <Subtype>Information</Subtype>
      <Abstract>It might be possible for a web page controlled by an attacker to load the content of this response within an iframe on the attacker's page. This may enable a "clickjacking" attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.&lt;br&gt;&lt;br&gt;Note that this issue is being reported because the application's response does not set a suitable &lt;b&gt;X-Frame-Options&lt;/b&gt; header in order to prevent framing attacks. Some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</Abstract>
      <Explanation/>
      <Recommendations>You should review the application functions that are accessible from within the response, and determine whether they can be used by application users to perform any sensitive actions within the application. If so, then a framing attack targeting this response may result in unauthorized actions.&lt;br&gt;&lt;br&gt;To effectively prevent framing attacks, the application should return a response header with the name &lt;b&gt;X-Frame-Options&lt;/b&gt; and the value &lt;b&gt;DENY&lt;/b&gt; to prevent framing altogether, or the value &lt;b&gt;SAMEORIGIN&lt;/b&gt; to allow framing only by pages on the same origin as the response itself.</Recommendations>
    </Vulnerability>
    <Vulnerability>
      <ClassID>601f978f-47e9-4d89-a539-0828988e79c5</ClassID>
      <AnalyzerName>Burp Suite</AnalyzerName>
      <Kingdom>Input Validation</Kingdom>
      <Type>Frameable response (potential Clickjacking)</Type>
      <Subtype>Information</Subtype>
      <Abstract>It might be possible for a web page controlled by an attacker to load the content of this response within an iframe on the attacker's page. This may enable a "clickjacking" attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.&lt;br&gt;&lt;br&gt;Note that this issue is being reported because the application's response does not set a suitable &lt;b&gt;X-Frame-Options&lt;/b&gt; header in order to prevent framing attacks. Some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</Abstract>
      <Explanation/>
      <Recommendations>You should review the application functions that are accessible from within the response, and determine whether they can be used by application users to perform any sensitive actions within the application. If so, then a framing attack targeting this response may result in unauthorized actions.&lt;br&gt;&lt;br&gt;To effectively prevent framing attacks, the application should return a response header with the name &lt;b&gt;X-Frame-Options&lt;/b&gt; and the value &lt;b&gt;DENY&lt;/b&gt; to prevent framing altogether, or the value &lt;b&gt;SAMEORIGIN&lt;/b&gt; to allow framing only by pages on the same origin as the response itself.</Recommendations>
    </Vulnerability>
    <Vulnerability>
      <ClassID>ff0e0980-42d0-41e5-b3dd-e7e7d3f6ef92</ClassID>
      <AnalyzerName>Burp Suite</AnalyzerName>
      <Kingdom>Input Validation</Kingdom>
      <Type>HTML does not specify charset</Type>
      <Subtype>Information</Subtype>
      <Abstract>If a web response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.&lt;br&gt;&lt;br&gt;In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of the response and the context in which it appears to determine whether any vulnerability exists.</Abstract>
      <Explanation/>
      <Recommendations>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example &lt;b&gt;charset=ISO-8859-1&lt;/b&gt;.</Recommendations>
    </Vulnerability>
    <Vulnerability>
      <ClassID>824e1e24-5de6-4ce6-b6db-ddf2a8df278e</ClassID>
      <AnalyzerName>Burp Suite</AnalyzerName>
      <Kingdom>Input Validation</Kingdom>
      <Type>Cross-site scripting (reflected)</Type>
      <Subtype>High</Subtype>
      <Abstract>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request which, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.&lt;br&gt;&lt;br&gt;The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.&lt;br&gt;&lt;br&gt;Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site which causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).&lt;br&gt;&lt;br&gt;The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality which it contains, and the other applications which belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain which can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization which owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application, and exploiting users' trust in the organization in order to capture credentials for other applications which it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk.</Abstract>
      <Explanation>The value of the &lt;b&gt;q&lt;/b&gt; request parameter is copied into the HTML document as plain text between tags. The payload &lt;b&gt;5d4ff&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;18327&lt;/b&gt; was submitted in the q parameter. This input was echoed unmodified in the application's response.&lt;br&gt;&lt;br&gt;This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.</Explanation>
      <Recommendations>In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:&lt;ul&gt;&lt;li&gt;Input should be validated as strictly as possible on arrival, given the kind of content which it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.&lt;/li&gt;&lt;li&gt;User input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including &amp;lt; &amp;gt; " ' and =, should be replaced with the corresponding HTML entities (&amp;amp;lt; &amp;amp;gt; etc).&lt;/li&gt;&lt;/ul&gt;In cases where the application's functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.</Recommendations>
    </Vulnerability>
    <Vulnerability>
      <ClassID>76adb17a-c542-40e0-b451-f83ebd5fe1cf</ClassID>
      <AnalyzerName>Burp Suite</AnalyzerName>
      <Kingdom>Input Validation</Kingdom>
      <Type>SQL injection</Type>
      <Subtype>High</Subtype>
      <Abstract>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.&lt;br&gt;&lt;br&gt;Various attacks can be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and executing operating system commands.</Abstract>
      <Explanation>The &lt;b&gt;b_id&lt;/b&gt; cookie appears to be vulnerable to SQL injection attacks. The payload &lt;b&gt;'&lt;/b&gt; was submitted in the b_id cookie, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.&lt;br&gt;&lt;br&gt;The database appears to be Microsoft SQL Server.</Explanation>
      <Recommendations>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize &lt;i&gt;every&lt;/i&gt; variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.&lt;br&gt;&lt;br&gt;You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:&lt;ul&gt;&lt;li&gt;One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string in which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.&lt;/li&gt;&lt;li&gt;Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.&lt;/li&gt;&lt;/ul&gt;</Recommendations>
    </Vulnerability>
    <Vulnerability>
      <ClassID>9805afe9-0b55-44d8-832a-c5e52a60443c</ClassID>
      <AnalyzerName>Burp Suite</AnalyzerName>
      <Kingdom>Input Validation</Kingdom>
      <Type>HTML does not specify charset</Type>
      <Subtype>Information</Subtype>
      <Abstract>If a web response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.&lt;br&gt;&lt;br&gt;In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of the response and the context in which it appears to determine whether any vulnerability exists.</Abstract>
      <Explanation/>
      <Recommendations>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example &lt;b&gt;charset=ISO-8859-1&lt;/b&gt;.</Recommendations>
    </Vulnerability>
    <Vulnerability>
      <ClassID>116313ef-c8ed-40ca-b67a-eb43fe6d4a31</ClassID>
      <AnalyzerName>Burp Suite</AnalyzerName>
      <Kingdom>Input Validation</Kingdom>
      <Type>Cleartext submission of password</Type>
      <Subtype>High</Subtype>
      <Abstract>Passwords submitted over an unencrypted connection are vulnerable to capture by an attacker who is suitably positioned on the network. This includes any malicious party located on the user's own network, within their ISP, within the ISP used by the application, and within the application's hosting infrastructure. Even if switched networks are employed at some of these locations, techniques exist to circumvent this defense and monitor the traffic passing through switches. </Abstract>
      <Explanation>The page contains a form with the following action URL, which is submitted over clear-text HTTP:&lt;ul&gt;&lt;li&gt;http://bwa/bodgeit/login.jsp&lt;/li&gt;&lt;/ul&gt;The form contains the following password field:&lt;ul&gt;&lt;li&gt;password&lt;/li&gt;&lt;/ul&gt;</Explanation>
      <Recommendations>The application should use transport-level encryption (SSL or TLS) to protect all sensitive communications passing between the client and the server. Communications that should be protected include the login mechanism and related functionality, and any functions where sensitive data can be accessed or privileged actions can be performed. These areas of the application should employ their own session handling mechanism, and the session tokens used should never be transmitted over unencrypted communications. If HTTP cookies are used for transmitting session tokens, then the secure flag should be set to prevent transmission over clear-text HTTP.</Recommendations>
    </Vulnerability>
    <Vulnerability>
      <ClassID>239694b5-dd58-4f55-a4de-e4be5b78f2c3</ClassID>
      <AnalyzerName>Burp Suite</AnalyzerName>
      <Kingdom>Input Validation</Kingdom>
      <Type>SQL injection</Type>
      <Subtype>High</Subtype>
      <Abstract>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.&lt;br&gt;&lt;br&gt;Various attacks can be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and executing operating system commands.</Abstract>
      <Explanation>The &lt;b&gt;username&lt;/b&gt; parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the username parameter, and a general error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.</Explanation>
      <Recommendations>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize &lt;i&gt;every&lt;/i&gt; variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.&lt;br&gt;&lt;br&gt;You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:&lt;ul&gt;&lt;li&gt;One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string in which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.&lt;/li&gt;&lt;li&gt;Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.&lt;/li&gt;&lt;/ul&gt;</Recommendations>
    </Vulnerability>
    <Vulnerability>
      <ClassID>d661cddf-a024-479d-af82-a3715b368baf</ClassID>
      <AnalyzerName>Burp Suite</AnalyzerName>
      <Kingdom>Input Validation</Kingdom>
      <Type>HTML does not specify charset</Type>
      <Subtype>Information</Subtype>
      <Abstract>If a web response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.&lt;br&gt;&lt;br&gt;In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of the response and the context in which it appears to determine whether any vulnerability exists.</Abstract>
      <Explanation/>
      <Recommendations>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example &lt;b&gt;charset=ISO-8859-1&lt;/b&gt;.</Recommendations>
    </Vulnerability>
    <Vulnerability>
      <ClassID>b2131e64-6167-4c04-8250-3d0686bbc9d6</ClassID>
      <AnalyzerName>Burp Suite</AnalyzerName>
      <Kingdom>Input Validation</Kingdom>
      <Type>HTML does not specify charset</Type>
      <Subtype>Information</Subtype>
      <Abstract>If a web response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.&lt;br&gt;&lt;br&gt;In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of the response and the context in which it appears to determine whether any vulnerability exists.</Abstract>
      <Explanation/>
      <Recommendations>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example &lt;b&gt;charset=ISO-8859-1&lt;/b&gt;.</Recommendations>
    </Vulnerability>
    <Vulnerability>
      <ClassID>870507e8-48d3-49fa-87b7-0774910a4a2f</ClassID>
      <AnalyzerName>Burp Suite</AnalyzerName>
      <Kingdom>Input Validation</Kingdom>
      <Type>HTML does not specify charset</Type>
      <Subtype>Information</Subtype>
      <Abstract>If a web response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.&lt;br&gt;&lt;br&gt;In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of the response and the context in which it appears to determine whether any vulnerability exists.</Abstract>
      <Explanation/>
      <Recommendations>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example &lt;b&gt;charset=ISO-8859-1&lt;/b&gt;.</Recommendations>
    </Vulnerability>
    <Vulnerability>
      <ClassID>98731582-571d-4adf-82e3-20ff8a4e3f3b</ClassID>
      <AnalyzerName>Burp Suite</AnalyzerName>
      <Kingdom>Input Validation</Kingdom>
      <Type>HTML does not specify charset</Type>
      <Subtype>Information</Subtype>
      <Abstract>If a web response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.&lt;br&gt;&lt;br&gt;In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of the response and the context in which it appears to determine whether any vulnerability exists.</Abstract>
      <Explanation/>
      <Recommendations>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example &lt;b&gt;charset=ISO-8859-1&lt;/b&gt;.</Recommendations>
    </Vulnerability>
    <Vulnerability>
      <ClassID>44d403af-215c-4089-8307-75aaa97a3bda</ClassID>
      <AnalyzerName>Burp Suite</AnalyzerName>
      <Kingdom>Input Validation</Kingdom>
      <Type>Password field with autocomplete enabled</Type>
      <Subtype>Low</Subtype>
      <Abstract>Most browsers have a facility to remember user credentials that are entered into HTML forms. This function can be configured by the user and also by applications which employ user credentials. If the function is enabled, then credentials entered by the user are stored on their local computer and retrieved by the browser on future visits to the same application.&lt;br&gt;&lt;br&gt;The stored credentials can be captured by an attacker who gains access to the computer, either locally or through some remote compromise. Further, methods have existed whereby a malicious web site can retrieve the stored credentials for other applications, by exploiting browser vulnerabilities or through application-level cross-domain attacks. </Abstract>
      <Explanation>The page contains a form with the following action URL:&lt;ul&gt;&lt;li&gt;http://bwa/bodgeit/login.jsp&lt;/li&gt;&lt;/ul&gt;The form contains the following password field with autocomplete enabled:&lt;ul&gt;&lt;li&gt;password&lt;/li&gt;&lt;/ul&gt;</Explanation>
      <Recommendations>To prevent browsers from storing credentials entered into HTML forms, you should include the attribute &lt;b&gt;autocomplete="off"&lt;/b&gt; within the FORM tag (to protect all form fields) or within the relevant INPUT tags (to protect specific individual fields).</Recommendations>
    </Vulnerability>
    <Vulnerability>
      <ClassID>3021e12c-fe1b-4797-a354-588953fc8e50</ClassID>
      <AnalyzerName>Burp Suite</AnalyzerName>
      <Kingdom>Input Validation</Kingdom>
      <Type>SQL injection</Type>
      <Subtype>High</Subtype>
      <Abstract>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.&lt;br&gt;&lt;br&gt;Various attacks can be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and executing operating system commands.</Abstract>
      <Explanation>The &lt;b&gt;password&lt;/b&gt; parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the password parameter, and a general error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.</Explanation>
      <Recommendations>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize &lt;i&gt;every&lt;/i&gt; variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.&lt;br&gt;&lt;br&gt;You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:&lt;ul&gt;&lt;li&gt;One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string in which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.&lt;/li&gt;&lt;li&gt;Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.&lt;/li&gt;&lt;/ul&gt;</Recommendations>
    </Vulnerability>
    <Vulnerability>
      <ClassID>dae18686-6ec9-4300-980e-a03abea28750</ClassID>
      <AnalyzerName>Burp Suite</AnalyzerName>
      <Kingdom>Input Validation</Kingdom>
      <Type>Cookie without HttpOnly flag set</Type>
      <Subtype>Low</Subtype>
      <Abstract>If the HttpOnly attribute is set on a cookie, then the cookie's value cannot be read or set by client-side JavaScript. This measure can prevent certain client-side attacks, such as cross-site scripting, from trivially capturing the cookie's value via an injected script.</Abstract>
      <Explanation>The following cookie was issued by the application and does not have the HttpOnly flag set:&lt;ul&gt;&lt;li&gt;&lt;b&gt;JSESSIONID=AD00240A932835EDD60B3F7487A9D15D; Path=/&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;The cookie appears to contain a session token, which may increase the risk associated with this issue. You should review the contents of the cookie to determine its function.</Explanation>
      <Recommendations>There is usually no good reason not to set the HttpOnly flag on all cookies. Unless you specifically require legitimate client-side scripts within your application to read or set a cookie's value, you should set the HttpOnly flag by including this attribute within the relevant Set-cookie directive.&lt;br&gt;&lt;br&gt;You should be aware that the restrictions imposed by the HttpOnly flag can potentially be circumvented in some circumstances, and that numerous other serious attacks can be delivered by client-side script injection, aside from simple cookie stealing.</Recommendations>
    </Vulnerability>
    <Vulnerability>
      <ClassID>3a37b13b-1519-4684-888f-ab21ad5ef251</ClassID>
      <AnalyzerName>Burp Suite</AnalyzerName>
      <Kingdom>Input Validation</Kingdom>
      <Type>Frameable response (potential Clickjacking)</Type>
      <Subtype>Information</Subtype>
      <Abstract>It might be possible for a web page controlled by an attacker to load the content of this response within an iframe on the attacker's page. This may enable a "clickjacking" attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.&lt;br&gt;&lt;br&gt;Note that this issue is being reported because the application's response does not set a suitable &lt;b&gt;X-Frame-Options&lt;/b&gt; header in order to prevent framing attacks. Some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</Abstract>
      <Explanation/>
      <Recommendations>You should review the application functions that are accessible from within the response, and determine whether they can be used by application users to perform any sensitive actions within the application. If so, then a framing attack targeting this response may result in unauthorized actions.&lt;br&gt;&lt;br&gt;To effectively prevent framing attacks, the application should return a response header with the name &lt;b&gt;X-Frame-Options&lt;/b&gt; and the value &lt;b&gt;DENY&lt;/b&gt; to prevent framing altogether, or the value &lt;b&gt;SAMEORIGIN&lt;/b&gt; to allow framing only by pages on the same origin as the response itself.</Recommendations>
    </Vulnerability>
  </Vulnerabilities>
</FVDL>
